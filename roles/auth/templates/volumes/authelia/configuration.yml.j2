# Doc: https://www.authelia.com/configuration/prologue/introduction/
authentication_backend:
  password_reset:
    disable: false
  refresh_interval: 1m
  ldap:
    address: ldap://lldap:3890
    implementation: custom
    timeout: 5s
    start_tls: false
    base_dn: "{{ auth_base_dn }}"
    additional_users_dn: ou=people
    users_filter: (&(|({username_attribute}={input})({mail_attribute}={input}))(objectClass=person))
    additional_groups_dn: ou=groups
    groups_filter: "(member={dn})"
    user: uid=bind_user,ou=people,{{ auth_base_dn }}
    password: "{{ auth_bind_user_password }}"
    attributes:
      display_name: displayName
      group_name: cn
      mail: mail
      username: uid

storage:
  encryption_key: "{{ auth_authelia_storage_encryption_key }}"
  postgres:
    address: "tcp://{{ auth_authelia_postgres_container_name }}"
    database: authelia
    username: "{{ auth_authelia_postgres_user }}"
    password: "{{ auth_authelia_postgres_password }}"

session:
  secret: "{{ auth_authelia_session_secret }}"
  cookies:
    - domain: "{{ root_domain }}"
      authelia_url: "https://{{ auth_authelia_domain }}"

notifier:
  disable_startup_check: false
  smtp:
    address: "smtp://{{ smtp_server }}:{{ smtp_port }}"
    username: "{{ auth_smtp_user }}"
    sender: "{{ root_domain }} <{{ auth_smtp_user }}>"
    password: "{{ auth_smtp_password }}"

server:
  endpoints:
    authz:
      forward-auth:
        implementation: 'ForwardAuth'

identity_validation:
  reset_password:
    jwt_secret: "{{ auth_lldap_jwt_secret }}"
    jwt_algorithm: HS512
    jwt_lifespan: 1 hour

access_control:
  rules:
    - domain:
        - '{{ seedbox_qbittorrent_domain }}'
        - '{{ seedbox_slskd_domain }}'
        - '{{ arr_sonarr_domain }}'
        - '{{ arr_radarr_domain }}'
        - '{{ arr_prowlarr_domain }}'
        - '{{ arr_bazarr_domain }}'
        - '{{ auth_lldap_domain }}'
        - '{{ arr_lidify_domain }}'
      policy: 'two_factor'
      subject: 'group:{{ auth_group_manager }}'
    - domain:
        - '{{ navidrome_domain }}'
      policy: 'two_factor'
      subject: 'group:{{ auth_group_privileged }}'
    - domain: "*.{{ root_domain }}"
      policy: deny

webauthn:
  display_name: "{{ root_domain }}"

totp:
  issuer: "{{ root_domain }}"
  algorithm: sha1
  allowed_algorithms:
    - sha1
    - sha256
    - sha512
  allowed_digits:
    - 6
    - 8

identity_providers:
  oidc:
    hmac_secret: "{{ auth_authelia_hmac_secret }}"
    jwks:
      - key: |
          {{ auth_authelia_jwks_key | indent(width=10, first=False) }}
    cors:
      endpoints:
        - userinfo
        - authorization
        - token
        - revocation
        - introspection
      allowed_origins:
        - "https://{{ mealie_domain }}"
      allowed_origins_from_client_redirect_uris: true
    claims_policies:
        default:
            id_token: ['preferred_username', 'name']
        with_email:
            id_token: ['email', 'email_verified', 'alt_emails', 'preferred_username', 'name']
        with_groups:
            id_token: ['groups', 'preferred_username', 'name']
        all:
            id_token: ['groups', 'email', 'email_verified', 'alt_emails', 'preferred_username', 'name']

      - client_id: "{{ paperless_authelia_client_id }}"
        client_name: "Paperless"
        client_secret: "{{ paperless_authelia_client_secret_digest }}"
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        pkce_challenge_method: 'S256'
        redirect_uris:
          - 'https://{{ paperless_domain }}/accounts/oidc/authelia/login/callback/'
        claims_policy: 'all'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'

      - client_id: "{{ mealie_authelia_client_id }}"
        client_name: "Mealie"
        client_secret: "{{ mealie_authelia_client_secret_digest }}"
        public: false
        authorization_policy: 'two_factor'
        require_pkce: true
        grant_types:
          - authorization_code
        pkce_challenge_method: 'S256'
        claims_policy: 'all'
        redirect_uris:
          - 'https://{{ mealie_domain }}/login'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'

      - client_id: "{{ jellyfin_authelia_client_id }}"
        client_name: "Jellyfin"
        client_secret: "{{ jellyfin_authelia_client_secret_digest }}"
        public: false
        authorization_policy: "two_factor"
        require_pkce: true
        pkce_challenge_method: "S256"
        redirect_uris:
          - "https://{{ jellyfin_domain }}/sso/OID/r/authelia"
        claims_policy: 'with_groups'
        scopes:
          - "openid"
          - "profile"
          - "groups"
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_post'

      - client_id: "{{ website_authelia_client_id }}"
        client_name: "catboy.house"
        client_secret: "{{ website_authelia_client_secret_digest }}"
        public: false
        authorization_policy: "two_factor"
        grant_types:
          - authorization_code
        redirect_uris:
          - "http://127.0.0.1:8000/oidc/callback"
          - "https://{{ root_domain }}/oidc/callback"
        claims_policy: 'all'
        scopes:
          - "openid"
          - "groups"
          - "profile"
          - "email"
        userinfo_signed_response_alg: "none"
        token_endpoint_auth_method: "client_secret_basic"

      - client_id: "{{ docmost_authelia_client_id }}"
        client_name: "Docmost"
        client_secret: "{{ docmost_authelia_client_secret_digest }}"
        public: false
        authorization_policy: "two_factor"
        grant_types:
          - authorization_code
        redirect_uris:
          - "{{ docmost_authelia_redirect_uri }}"
        claims_policy: 'all'
        scopes:
          - 'openid'
          - 'profile'
          - 'email'
          - 'groups'
        userinfo_signed_response_alg: 'none'
        token_endpoint_auth_method: 'client_secret_basic'

      - client_id: "{{ choretrackerthing_authelia_client_id }}"
        client_name: "Chore Tracker Thing"
        client_secret: "{{ choretrackerthing_authelia_client_digest }}"
        public: false
        authorization_policy: "two_factor"
        grant_types:
          - authorization_code
        redirect_uris:
          - "http://127.0.0.1:8000/oidc/callback"
        claims_policy: 'with_groups'
        scopes:
          - "openid"
          - "groups"
          - "profile"
        userinfo_signed_response_alg: "none"
        token_endpoint_auth_method: "client_secret_basic"

      - client_id: "{{ romm_authelia_client_id }}"
        client_name: "RomM"
        client_secret: "{{ romm_authelia_client_digest }}"
        public: false
        authorization_policy: "two_factor"
        grant_types:
          - authorization_code
        redirect_uris:
          - "https://{{ romm_domain }}/api/oauth/openid"
        claims_policy: 'all'
        scopes:
          - "openid"
          - "groups"
          - "email"
          - "profile"
        userinfo_signed_response_alg: "none"
        token_endpoint_auth_method: "client_secret_basic"

      - client_id: "{{ auth_client_yamtrack_id }}"
        client_name: "Yamtrack"
        client_secret: "{{ auth_client_yamtrack_secret_digest }}"
        public: false
        authorization_policy: "one_factor"
        grant_types:
          - authorization_code
        redirect_uris:
          - "https://{{ yamtrack_domain }}/accounts/oidc/{{ yamtrack_auth_provider_authelia }}/login/callback/"
        claims_policy: "with_email"
        scopes:
            - "openid"
            - "email"
            - "profile"
        token_endpoint_auth_method: "client_secret_basic"
